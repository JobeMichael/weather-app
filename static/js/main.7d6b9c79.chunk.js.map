{"version":3,"sources":["assets/images/bg.png","hooks/useFetch.js","utils/getUrl.js","components/WeatherAlert/WeatherAlert.styles.js","components/WeatherAlert/WeatherAlert.js","utils/getTextByWindSpeed.js","components/Forecast/Forecast.styles.js","utils/getIconUrl.js","components/Forecast/ForeCastCard/ForeCastCard.styles.js","components/Forecast/ForeCastCard/ForeCastCard.js","components/Forecast/Forecast.js","components/Layout/Layout.styles.js","components/Layout/Layout.js","utils/getTimeFromUTC.js","components/Weather/Weather.styles.js","components/Weather/WeatherDetailCell/WeatherDetailsCell.styles.js","components/Weather/WeatherDetailCell/WeatherDetailCell.js","components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useFetch","url","useState","data","setData","error","setError","loading","setLoading","useEffect","a","axios","get","fetchData","getUrl","type","options","queryParams","Object","keys","map","key","join","process","Wrapper","styled","div","RainText","span","WeatherForecast","WeatherAlert","windSpeed","isRaining","speed","date","text","find","moment","format","Forecast","getIconUrl","icon","size","Card","Temperature","ForeCastCard","weather","description","main","temp","feels_like","temp_min","temp_max","dt_txt","src","alt","Math","floor","hightestWind","position","forecast","setForecast","weatherApiUrl","formattedData","useCallback","lastDay","add","list","reduce","acc","item","currentDate","wind","diff","includes","push","dt","App","bgImage","Layout","children","getTimeFromUTC","utc","unix","Header","WeatherDetailsWrapper","WeatherDetail","WeatherDetailCell","value","title","Weather","humidity","sys","country","sunrise","sunset","name","Date","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","coords","lat","lon","setPosition","latitude","longitude","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7d6b9c79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.f1ddd84e.png\";","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport const useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const { data } = await axios.get(url);\n        setData(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [url]);\n\n  return { data, error, loading };\n};\n","export const getUrl = (type, options) => {\n  const apiDomain =\n    \"https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5\";\n  const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n  const queryParams = Object.keys(options)\n    .map((key) => key + \"=\" + options[key])\n    .join(\"&\");\n\n  const url = `${apiDomain}/${type}/?appid=${apiKey}&units=metric&${queryParams}`;\n  return url;\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  margin: 30px 0;\n  background: #7dd1e3;\n  border-radius: 12px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 5px 10px 18px #0d5475;\n`;\nexport const RainText = styled.span`\n  font-size: 16px;\n  color: #1377d0;\n  font-weight: bold;\n  margin-bottom: 15px;\n`;\nexport const WeatherForecast = styled.span`\n  font-size: 16px;\n  color: #1377d0;\n  font-weight: bold;\n`;\n","import moment from \"moment\";\nimport React from \"react\";\nimport { getTextByWindSpeed } from \"utils/getTextByWindSpeed\";\nimport * as Styled from \"./WeatherAlert.styles\";\n\nconst WeatherAlert = ({ isRaining, windSpeed: { speed, date } }) => {\n  return (\n    <Styled.Wrapper>\n      <Styled.RainText>\n        {isRaining\n          ? `🌧️ It will rain today. Carry an umbrella for goodness sake! 🌧️`\n          : `☀️ No rain today. Great day for a run ☀️`}\n      </Styled.RainText>\n      <Styled.WeatherForecast>\n        {`💨 Wind forecast : ${getTextByWindSpeed(speed)} on ${moment(\n          date\n        ).format(\"dddd\")} 💨`}\n      </Styled.WeatherForecast>\n    </Styled.Wrapper>\n  );\n};\n\nexport default WeatherAlert;\n","export const getTextByWindSpeed = (windSpeed) => {\n  const data = [\n    { text: \"Calm\", speed: 0.5 },\n    { text: \"Light Air\", speed: 1.5 },\n    { text: \"Light Breeze\", speed: 3.3 },\n    { text: \"Gentle Breeze\", speed: 5.5 },\n    { text: \"Moderate Breeze\", speed: 7.9 },\n    { text: \"Fresh breeze\", speed: 10.7 },\n    { text: \"Strong Breeze\", speed: 13.8 },\n    { text: \"Gale\", speed: 17.1 },\n    { text: \"Storm\", speed: 24.4 },\n    { text: \"Violent storm\", speed: 32.6 },\n    { text: \"Hurricaine force\", speed: 32.7 },\n  ];\n\n  return data.find(({ speed }) => speed >= windSpeed).text;\n};\n","import styled from \"styled-components\";\n\nexport const Forecast = styled.div`\n  h3 {\n    font-size: 26px;\n  }\n  h4 {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n","export const getIconUrl = (icon, size = \"4x\") =>\n  `http://openweathermap.org/img/wn/${icon}@${size}.png`;\n","import styled from \"styled-components\";\n\nexport const Card = styled.div`\n  flex-shrink: 0;\n  flex-basis: 25%;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 5px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 30px;\n  text-align: center;\n  p {\n    font-weight: bold;\n  }\n  @media (max-width: 768px) {\n    flex-basis: 100%;\n    padding: 30px 0;\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Temperature = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  h4 {\n    font-size: 40px;\n  }\n`;\n","import moment from \"moment\";\nimport React from \"react\";\nimport { getIconUrl } from \"utils/getIconUrl\";\nimport * as Styled from \"./ForeCastCard.styles\";\n\nconst ForeCastCard = ({ data }) => {\n  const {\n    weather: [{ description, icon }],\n    main: { temp, feels_like, temp_min, temp_max },\n    dt_txt,\n  } = data;\n  return (\n    <>\n      <Styled.Card>\n        <p>{moment(dt_txt).format(\"dddd\")}</p>\n        <p>{moment(dt_txt).format(\"MMMM D, h:mm\")}</p>\n        <Styled.Temperature>\n          <img src={getIconUrl(icon, \"2x\")} alt=\"weather-icon\" />\n          <h4>{Math.floor(temp)}°</h4>\n          <span>{`${Math.floor(temp_max)}° / ${Math.floor(temp_min)}°`}</span>\n        </Styled.Temperature>\n        <h4>Feels like {Math.floor(feels_like)}°</h4>\n        <p>{description}</p>\n      </Styled.Card>\n    </>\n  );\n};\n\nexport default ForeCastCard;\n","import { useFetch } from \"hooks/useFetch\";\nimport moment from \"moment\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { getUrl } from \"utils/getUrl\";\nimport WeatherAlert from \"../WeatherAlert/WeatherAlert\";\nimport * as Styled from \"./Forecast.styles\";\nimport ForeCastCard from \"./ForeCastCard/ForeCastCard\";\n\nlet isRaining = false;\nlet hightestWind = { speed: 0 };\nconst Forecast = ({ position }) => {\n  const [forecast, setForecast] = useState();\n  const weatherApiUrl = getUrl(\"forecast\", position);\n  const { data, loading, error } = useFetch(weatherApiUrl);\n\n  const formattedData = useCallback(() => {\n    if (data) {\n      const lastDay = moment().add(3, \"days\");\n      isRaining = data.list[0].weather[0].main === \"Rain\";\n\n      return data.list.reduce((acc, item) => {\n        const date = item.dt_txt;\n        const currentDate = moment(date);\n        const windSpeed = item.wind.speed;\n\n        if (currentDate.diff(lastDay, \"days\", true) < 0) {\n          if (windSpeed > hightestWind.speed) {\n            hightestWind.speed = windSpeed;\n            hightestWind.date = date;\n          }\n          if (date.includes(\"12:00:00\")) {\n            acc.push(item);\n          }\n        }\n        return acc;\n      }, []);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    setForecast(formattedData());\n  }, [data, formattedData]);\n\n  if (error) {\n    return <h1>Error...</h1>;\n  }\n\n  if (loading || !data) {\n    return <h1>Loading...</h1>;\n  }\n\n  return (\n    <>\n      <Styled.Forecast>\n        <h3>Forecast</h3>\n        <WeatherAlert isRaining={isRaining} windSpeed={hightestWind} />\n        <h4>Next 3 days</h4>\n        <Styled.Wrapper>\n          {forecast.map((item) => (\n            <ForeCastCard key={item.dt} data={item} />\n          ))}\n        </Styled.Wrapper>\n      </Styled.Forecast>\n    </>\n  );\n};\n\nexport default Forecast;\n","import styled from \"styled-components\";\nimport bgImage from \"../../assets/images/bg.png\";\n\nexport const App = styled.div`\n  background-image: url(${bgImage});\n  background-position: center;\n  display: flex;\n  min-height: 100vh;\n  color: #fff;\n  padding: 30px;\n  flex-direction: column;\n`;\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 1020px;\n  width: 100%;\n`;\n","import React from \"react\";\nimport * as Styled from \"./Layout.styles\";\n\nconst Layout = ({ children }) => {\n  return (\n    <>\n      <Styled.App>\n        <Styled.Wrapper>{children}</Styled.Wrapper>\n      </Styled.App>\n    </>\n  );\n};\n\nexport default Layout;\n","import moment from \"moment\";\nexport const getTimeFromUTC = (utc) => {\n  return moment.unix(utc).format(\"HH:mm\");\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin: 30px 0;\n`;\n\nexport const Header = styled.div`\n  flex-basis: 100%;\n  margin-bottom: 30px;\n  h2 {\n    color: rgb(255, 255, 255);\n    display: block;\n    font-weight: 600;\n    font-size: 30px;\n    text-align: center;\n    padding: 5px 0px;\n  }\n  h4 {\n    color: rgb(255, 255, 255);\n    display: block;\n    font-weight: 400;\n    font-size: 15px;\n    text-align: center;\n    padding: 5px 0px;\n  }\n`;\n\nexport const WeatherDetailsWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  background-color: rgba(255, 255, 255, 0.2);\n  align-self: flex-start;\n  padding: 10px 0px;\n  margin: 20px 0px;\n  border-radius: 10px;\n  @media (max-width: 768px) {\n    flex-basis: 100%;\n  }\n`;\n\nexport const Temperature = styled.div`\n  display: flex;\n  align-items: center;\n  h3 {\n    font-size: 70px;\n  }\n  h4 {\n    font-size: 30px;\n    @media (max-width: 768px) {\n      display: none;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const WeatherDetail = styled.div`\n  flex-basis: calc(100% / 3);\n  padding: 20px 0;\n\n  h4 {\n    font-size: 23px;\n    font-weight: bold;\n    color: rgb(255, 255, 255);\n    display: block;\n    font-weight: 400;\n    text-align: center;\n    padding: 5px 0px;\n  }\n  span {\n    color: rgb(255, 255, 255);\n    display: block;\n    font-weight: bold;\n    font-size: 17px;\n    text-align: center;\n  }\n`;\n","import React from \"react\";\nimport * as Styled from \"./WeatherDetailsCell.styles\";\n\nconst WeatherDetailCell = ({ value, title }) => {\n  return (\n    <Styled.WeatherDetail>\n      <h4>{value}</h4>\n      <span>{title}</span>\n    </Styled.WeatherDetail>\n  );\n};\n\nexport default WeatherDetailCell;\n","import { useFetch } from \"hooks/useFetch\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { getIconUrl } from \"utils/getIconUrl\";\nimport { getTimeFromUTC } from \"utils/getTimeFromUTC\";\nimport { getUrl } from \"utils/getUrl\";\nimport * as Styled from \"./Weather.styles\";\nimport WeatherDetailCell from \"./WeatherDetailCell/WeatherDetailCell\";\n\nconst Weather = ({ position }) => {\n  const weatherApiUrl = getUrl(\"weather\", position);\n  const { data, loading, error } = useFetch(weatherApiUrl);\n\n  if (error) {\n    return <></>;\n  }\n\n  if (loading || !data) {\n    return <></>;\n  }\n\n  const {\n    weather: [{ description, icon }],\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    wind: { speed: windSpeed },\n    sys: { country, sunrise, sunset },\n    name,\n  } = data;\n\n  return (\n    <Styled.Wrapper>\n      <Styled.Header>\n        <h2>\n          {name}, {country}\n        </h2>\n        <h4>{moment(new Date()).format(\"dddd D, MMMM YYYY\")}</h4>\n      </Styled.Header>\n      <Styled.Temperature>\n        <div>\n          <img src={getIconUrl(icon)} alt=\"weather-icon\"></img>\n        </div>\n        <div>\n          <h3>{Math.floor(temp)}°</h3>\n          <p>Feels like {Math.floor(feels_like)}°</p>\n          <h4>{description}</h4>\n        </div>\n      </Styled.Temperature>\n      <Styled.WeatherDetailsWrapper>\n        <WeatherDetailCell value={`${Math.floor(temp_max)}°`} title=\"Hight\" />\n        <WeatherDetailCell value={`${windSpeed}mph`} title=\"Wind\" />\n        <WeatherDetailCell value={getTimeFromUTC(sunrise)} title=\"Sunrise\" />\n        <WeatherDetailCell value={`${Math.floor(temp_min)}°`} title=\"Low\" />\n        <WeatherDetailCell value={`${humidity}%`} title=\"Humidity\" />\n        <WeatherDetailCell value={getTimeFromUTC(sunset)} title=\"Sunset\" />\n      </Styled.WeatherDetailsWrapper>\n    </Styled.Wrapper>\n  );\n};\n\nexport default Weather;\n","import Forecast from \"components/Forecast/Forecast\";\nimport Layout from \"components/Layout/Layout\";\nimport Weather from \"components/Weather/Weather\";\nimport React, { useEffect, useState } from \"react\";\nimport { geolocated } from \"react-geolocated\";\n\nconst App = ({ coords }) => {\n  const [position, setPosition] = useState({\n    lat: 0,\n    lon: 0,\n  });\n\n  useEffect(() => {\n    if (coords) {\n      setPosition({\n        lat: coords.latitude,\n        lon: coords.longitude,\n      });\n    }\n  }, [coords]);\n\n  return (\n    <Layout>\n      {position.lat > 0 || position.lon > 0 ? (\n        <>\n          <Weather position={position} />\n          <Forecast position={position} />\n        </>\n      ) : (\n        <>\n          <h1>Wait for a second, let me process it...</h1>\n          <h3>\n            💁Turn On Location Services to Allow, if you haven't done yet!\n          </h3>\n        </>\n      )}\n    </Layout>\n  );\n};\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}